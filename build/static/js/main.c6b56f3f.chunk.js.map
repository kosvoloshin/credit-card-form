{"version":3,"sources":["Utils/utils.js","Components/Card/CardSide.jsx","Components/Card/CardRow.jsx","Components/Card/CardCol.jsx","Components/Card/CardLogo.jsx","Components/Card/Chip.jsx","Components/Card/Card.jsx","Components/Form/FormRow.jsx","Components/Form/FormBlock.jsx","Components/Form/Form.jsx","Containers/App.jsx","serviceWorker.js","index.js"],"names":["cardLogo","num","logoPath","match","CardSide","className","bgPath","children","style","backgroundImage","defaultProps","CardRow","CardCol","label","CardLogo","cardNumber","src","alt","Chip","Card","cardNumberMask","cardHolder","month","year","cvv","isFlip","mask","value","maskArr","split","map","item","index","test","setMask","key","title","slice","replace","FormRow","FormBlock","Form","handlerSubmit","handlerChangeCardNumber","handlerChangeValue","handlerChangeCvv","handlerFlip","onSubmit","type","name","placeholder","onChange","disabled","Array","from","length","v","k","arrYears","currentYear","Date","getFullYear","i","push","generateYears","onFocus","onBlur","App","state","e","preventDefault","target","setState","min","max","this","Math","round","random","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c6b56f3f.chunk.js","sourcesContent":["export const genereteMonths = () => {\r\n    return Array.from({ length: 12 }, (v, k) => k + 1).map(num => {\r\n        return num <= 9 ? `0${num}` : num;\r\n    });\r\n};\r\n\r\nexport const generateYears = () => {\r\n    let arrYears = [];\r\n    const currentYear = new Date().getFullYear();\r\n\r\n    for (let i = currentYear; i <= currentYear + 10; i++) {\r\n        arrYears.push(i);\r\n    }\r\n\r\n    return arrYears;\r\n};\r\n\r\nexport const generateRandomImage = (min, max) => {\r\n    return `./assets/images/cards/card-${Math.round(min + Math.random() * (max - min))}.jpg`;\r\n};\r\n\r\nexport const cardLogo = num => {\r\n    const logoPath = \"./assets/images/\";\r\n\r\n    switch (num) {\r\n        case num.match(/^4/) && num:\r\n            return `${logoPath}visa.png`;\r\n\r\n        case num.match(/^(34|37)/) && num:\r\n            return `${logoPath}amex.png`;\r\n\r\n        case num.match(/^5[1-5]/) && num:\r\n            return `${logoPath}mastercard.png`;\r\n\r\n        case num.match(/^60/) && num:\r\n            return `${logoPath}discover.png`;\r\n\r\n        case num.match(/^9792/) && num:\r\n            return `${logoPath}troy.png`;\r\n\r\n        case num.match(/^62/) && num:\r\n            return `${logoPath}unionpay.png`;\r\n\r\n        default:\r\n            return `${logoPath}visa.png`;\r\n    }\r\n};\r\n\r\nexport const setMask = (mask, value) => {\r\n    let maskArr = mask.split(\"\");\r\n    let valueArr = value.split(\"\");\r\n\r\n    valueArr.map((item, index) => {\r\n        if (/^(4|5|6|7)$/.test(index)) {\r\n            return (maskArr[index + 1] = \"*\");\r\n        }\r\n\r\n        if (/^(8|9|10|11)$/.test(index)) {\r\n            return (maskArr[index + 2] = \"*\");\r\n        }\r\n\r\n        if (/^(12|13|14|15)$/.test(index)) {\r\n            return (maskArr[index + 3] = item);\r\n        }\r\n\r\n        return (maskArr[index] = item);\r\n    });\r\n\r\n    return maskArr;\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst propTypes = {\r\n    className: PropTypes.string,\r\n    bgPath: PropTypes.string.isRequired,\r\n};\r\n\r\nconst defaultProps = {\r\n    className: \"\",\r\n};\r\n\r\nconst CardSide = ({ className, bgPath, children }) => {\r\n    return (\r\n        <div className={`card__side ${className}`} style={{ backgroundImage: `url(\"${bgPath}\")` }}>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nCardSide.propTypes = propTypes;\r\nCardSide.defaultProps = defaultProps;\r\n\r\nexport default CardSide;\r\n","import React from \"react\";\r\n\r\nconst CardRow = ({ children }) => {\r\n    return <div className=\"card__row\">{children}</div>;\r\n};\r\n\r\nexport default CardRow;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst propTypes = {\r\n    className: PropTypes.string,\r\n    label: PropTypes.string,\r\n};\r\n\r\nconst defaultProps = {\r\n    className: \"\",\r\n    label: \"\",\r\n};\r\n\r\nconst CardCol = ({ className, label, children }) => {\r\n    return (\r\n        <div className={`card__col ${className}`}>\r\n            <div className=\"card__label\">{label}</div>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nCardCol.propTypes = propTypes;\r\nCardCol.defaultProps = defaultProps;\r\n\r\nexport default CardCol;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { cardLogo } from \"../../Utils/utils\";\r\n\r\nconst propTypes = {\r\n    cardNumber: PropTypes.string.isRequired,\r\n};\r\n\r\nconst CardLogo = ({ cardNumber }) => {\r\n    return (\r\n        <div className=\"card__col logo\">\r\n            <img src={cardLogo(cardNumber)} alt=\"card-logo\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nCardLogo.propTypes = propTypes;\r\n\r\nexport default CardLogo;\r\n","import React from \"react\";\r\n\r\nconst Chip = () => {\r\n    return (\r\n        <div className=\"card__col chip\">\r\n            <span className=\"hor\" />\r\n            <span className=\"hor\" />\r\n            <span className=\"hor\" />\r\n            <span className=\"ver\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chip;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { setMask } from \"../../Utils/utils\";\r\nimport CardSide from \"./CardSide\";\r\nimport CardRow from \"./CardRow\";\r\nimport CardCol from \"./CardCol\";\r\nimport CardLogo from \"./CardLogo\";\r\nimport Chip from \"./Chip\";\r\n\r\nconst propTypes = {\r\n    handlerFlip: PropTypes.func.isRequired,\r\n    cardNumber: PropTypes.string.isRequired,\r\n    cardNumberMask: PropTypes.string.isRequired,\r\n    cardHolder: PropTypes.string.isRequired,\r\n    month: PropTypes.string.isRequired,\r\n    year: PropTypes.string.isRequired,\r\n    cvv: PropTypes.string.isRequired,\r\n    bgPath: PropTypes.string.isRequired,\r\n};\r\n\r\nconst Card = ({ cardNumber, cardNumberMask, cardHolder, month, year, cvv, isFlip, bgPath }) => {\r\n    return (\r\n        <div className={`card ${isFlip ? \"active\" : \"\"}`}>\r\n            <CardSide className=\"front\" bgPath={bgPath}>\r\n                <CardRow>\r\n                    <Chip />\r\n                    <CardLogo cardNumber={cardNumber} />\r\n                </CardRow>\r\n\r\n                <CardRow>\r\n                    <div className=\"card__number\">\r\n                        {(!cardNumber ? cardNumberMask.split(\"\") : setMask(cardNumberMask, cardNumber)).map(\r\n                            (item, index) => {\r\n                                return <span key={index}>{item}</span>;\r\n                            },\r\n                        )}\r\n                    </div>\r\n                </CardRow>\r\n\r\n                <CardRow>\r\n                    <CardCol className=\"holder\" label=\"Card Holder\">\r\n                        <div className=\"card__result\" title={cardHolder}>\r\n                            {!cardHolder ? \"Full Name\" : cardHolder}\r\n                        </div>\r\n                    </CardCol>\r\n\r\n                    <CardCol className=\"expires\" label=\"Expires\">\r\n                        <div className=\"card__result\">\r\n                            <span>{!month ? \"MM\" : month}</span>/<span>{!year ? \"YY\" : year.slice(2, 4)}</span>\r\n                        </div>\r\n                    </CardCol>\r\n                </CardRow>\r\n            </CardSide>\r\n\r\n            <CardSide className=\"back\" bgPath={bgPath}>\r\n                <div className=\"card__cvv\">{!cvv ? \"CVV\" : cvv.replace(/./g, \"*\")}</div>\r\n                <CardLogo cardNumber={cardNumber} />\r\n            </CardSide>\r\n        </div>\r\n    );\r\n};\r\n\r\nCard.propTypes = propTypes;\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\n\r\nconst FormRow = ({ children }) => {\r\n    return <div className=\"form__row\">{children}</div>;\r\n};\r\n\r\nexport default FormRow;\r\n","import React from \"react\";\r\n\r\nconst FormBlock = ({ children }) => {\r\n    return <label className=\"form__block\">{children}</label>;\r\n};\r\n\r\nexport default FormBlock;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport FormRow from \"./FormRow\";\r\nimport FormBlock from \"./FormBlock\";\r\nimport { genereteMonths, generateYears } from \"../../Utils/utils\";\r\n\r\nconst propTypes = {\r\n    handlerSubmit: PropTypes.func.isRequired,\r\n    handlerChangeCardNumber: PropTypes.func.isRequired,\r\n    handlerChangeValue: PropTypes.func.isRequired,\r\n    handlerChangeCvv: PropTypes.func.isRequired,\r\n    handlerFlip: PropTypes.func.isRequired,\r\n    cardNumber: PropTypes.string.isRequired,\r\n    cardHolder: PropTypes.string.isRequired,\r\n    month: PropTypes.string.isRequired,\r\n    year: PropTypes.string.isRequired,\r\n    cvv: PropTypes.string.isRequired,\r\n};\r\n\r\nconst Form = ({\r\n    handlerSubmit,\r\n    handlerChangeCardNumber,\r\n    handlerChangeValue,\r\n    handlerChangeCvv,\r\n    handlerFlip,\r\n    cardNumber,\r\n    cardHolder,\r\n    month,\r\n    year,\r\n    cvv,\r\n}) => {\r\n    return (\r\n        <form onSubmit={handlerSubmit} className=\"form\">\r\n            <FormRow>\r\n                <FormBlock>\r\n                    <input\r\n                        className=\"form__input\"\r\n                        type=\"text\"\r\n                        name=\"cardNumber\"\r\n                        placeholder=\"Card Number\"\r\n                        value={cardNumber}\r\n                        onChange={handlerChangeCardNumber}\r\n                    />\r\n                </FormBlock>\r\n            </FormRow>\r\n\r\n            <FormRow>\r\n                <FormBlock>\r\n                    <input\r\n                        className=\"form__input\"\r\n                        type=\"text\"\r\n                        name=\"cardHolder\"\r\n                        placeholder=\"Card Holder\"\r\n                        value={cardHolder}\r\n                        onChange={handlerChangeValue}\r\n                    />\r\n                </FormBlock>\r\n            </FormRow>\r\n\r\n            <FormRow>\r\n                <FormBlock>\r\n                    <select\r\n                        className=\"form__input form__input--select\"\r\n                        name=\"month\"\r\n                        placeholder=\"Month\"\r\n                        value={month}\r\n                        onChange={handlerChangeValue}\r\n                    >\r\n                        <option disabled value=\"\">\r\n                            Month\r\n                        </option>\r\n                        {genereteMonths().map(value => {\r\n                            return (\r\n                                <option key={value} value={value}>\r\n                                    {value}\r\n                                </option>\r\n                            );\r\n                        })}\r\n                    </select>\r\n                </FormBlock>\r\n\r\n                <FormBlock>\r\n                    <select\r\n                        className=\"form__input form__input--select\"\r\n                        name=\"year\"\r\n                        placeholder=\"Year\"\r\n                        value={year}\r\n                        onChange={handlerChangeValue}\r\n                    >\r\n                        <option disabled value=\"\">\r\n                            Year\r\n                        </option>\r\n                        {generateYears().map(year => {\r\n                            return (\r\n                                <option key={year} value={year}>\r\n                                    {year}\r\n                                </option>\r\n                            );\r\n                        })}\r\n                    </select>\r\n                </FormBlock>\r\n\r\n                <FormBlock>\r\n                    <input\r\n                        className=\"form__input\"\r\n                        type=\"text\"\r\n                        name=\"cvv\"\r\n                        placeholder=\"CVV\"\r\n                        value={cvv}\r\n                        onChange={handlerChangeCvv}\r\n                        onFocus={handlerFlip}\r\n                        onBlur={handlerFlip}\r\n                    />\r\n                </FormBlock>\r\n            </FormRow>\r\n\r\n            <FormRow>\r\n                <button className=\"form__submit\" type=\"submit\">\r\n                    Submit\r\n                </button>\r\n            </FormRow>\r\n        </form>\r\n    );\r\n};\r\n\r\nForm.propTypes = propTypes;\r\n\r\nexport default Form;\r\n","import React, { Component } from \"react\";\r\nimport Card from \"../Components/Card/Card\";\r\nimport Form from \"../Components/Form/Form\";\r\nimport { generateRandomImage } from \"../Utils/utils\";\r\n\r\nclass App extends Component {\r\n    state = {\r\n        cardNumber: \"\",\r\n        cardNumberMask: \"#### #### #### ####\",\r\n        cardHolder: \"\",\r\n        month: \"\",\r\n        year: \"\",\r\n        cvv: \"\",\r\n        isFlip: false,\r\n        bgPath: \"\",\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            bgPath: generateRandomImage(1, 12),\r\n        });\r\n    }\r\n\r\n    handlerSubmit = e => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    handlerChangeValue = ({ target }) => {\r\n        this.setState({\r\n            [target.name]: target.value,\r\n        });\r\n    };\r\n\r\n    handlerChangeCardNumber = ({ target }) => {\r\n        if (/(^[0-9]{1,16}$)|(^\\s{0}$)/g.test(target.value)) {\r\n            this.setState({\r\n                [target.name]: target.value,\r\n            });\r\n        }\r\n    };\r\n\r\n    handlerChangeCvv = ({ target }) => {\r\n        if (/(^[0-9]{1,3}$)|(^\\s{0}$)/g.test(target.value)) {\r\n            this.setState({\r\n                [target.name]: target.value,\r\n            });\r\n        }\r\n    };\r\n\r\n    handlerFlip = () => {\r\n        this.setState({\r\n            isFlip: !this.state.isFlip,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { cardNumber, cardNumberMask, cardHolder, month, year, cvv, isFlip, bgPath } = this.state;\r\n\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <div className=\"content\">\r\n                    <Card\r\n                        cardNumber={cardNumber}\r\n                        cardNumberMask={cardNumberMask}\r\n                        cardHolder={cardHolder}\r\n                        month={month}\r\n                        year={year}\r\n                        cvv={cvv}\r\n                        isFlip={isFlip}\r\n                        bgPath={bgPath}\r\n                    />\r\n                    <Form\r\n                        handlerSubmit={this.handlerSubmit}\r\n                        handlerChangeValue={this.handlerChangeValue}\r\n                        handlerChangeCardNumber={this.handlerChangeCardNumber}\r\n                        handlerChangeCvv={this.handlerChangeCvv}\r\n                        handlerFlip={this.handlerFlip}\r\n                        cardNumber={cardNumber}\r\n                        cardNumberMask={cardNumberMask}\r\n                        cardHolder={cardHolder}\r\n                        month={month}\r\n                        year={year}\r\n                        cvv={cvv}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./Containers/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}